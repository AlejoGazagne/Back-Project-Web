// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  email           String      @unique
  password        String
  savedProperties Favorites[]
}

model Seller {
  id          Int    @id @default(autoincrement())
  name        String
  email       String @unique
  phoneNumber String
  password    String
  posts       Post[]
}

model Favorites {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Post {
  id          Int           @id @default(autoincrement())
  title       String
  content     String
  published   Boolean
  price       Float
  onSale      Boolean
  ubication   String
  frontImage  String
  images      String[]
  type        String
  rooms       Int
  bathrooms   Int
  garage      Int
  area        Float
  pool        Boolean
  pets        Boolean
  seller      Seller        @relation(fields: [sellerId], references: [id])
  sellerId    Int
  saved       Favorites[]
  valorations Valorations[]
}

model Valorations {
  id             Int    @id @default(autoincrement())
  comment        String
  quailification Int
  postRelated    Post   @relation(fields: [postId], references: [id])
  postId         Int
}

// model Properties {
//   id        Int    @id @default(autoincrement())
//   ubication String
//   image     String
//   type      String
//   rooms     Int
//   bathrooms Int
//   garage    Int
//   area      Float
//   post      Post[]
//   seller    Seller @relation(fields: [sellerId], references: [id])
//   sellerId  Int
// }
